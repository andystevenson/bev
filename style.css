@import 'https://unpkg.com/open-props';
@import 'https://unpkg.com/open-props/normalize.min.css';
@import 'https://unpkg.com/open-props/buttons.min.css';
@import 'https://unpkg.com/open-props/animations.min.css';
@import 'https://unpkg.com/open-props/easings.min.css';

:root {
  --cover-size: 15rem;

  @media (max-width: 1024px) {
    --cover-size: 9rem;
  }
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  background: #111;
}

body {
  --cover-size: 9rem;
  height: 100%;
  width: 100%;
  font-family: sans-serif;
  display: flex;
  flex-direction: column;
  gap: 1em;
  place-content: safe center;
  overscroll-behavior: contain;
  box-sizing: border-box;
}

h1 {
  font-size: 2em;
  color: #fff;
  text-align: center;
}

@keyframes adjust-z-index {
  0% {
    z-index: 1;
  }

  50% {
    z-index: 100;
    /* When at the center, be on top */
  }

  100% {
    z-index: 1;
  }
}

/* Animation that rotates the cover */
@keyframes rotate-cover {
  0% {
    transform: translateX(-100%) rotateY(-45deg);
  }

  35% {
    transform: translateX(0) rotateY(-45deg);
  }

  50% {
    transform: rotateY(0deg) translateZ(1em) scale(1.5);
  }

  65% {
    transform: translateX(0) rotateY(45deg);
  }

  100% {
    transform: translateX(100%) rotateY(45deg);
  }
}

.cards {
  font-family: sans-serif;
  scroll-snap-type: x mandatory;
  box-sizing: border-box;
  list-style: none;
  overflow-x: scroll;
  white-space: nowrap;
  /* outline: 1px solid #333; */
  background: rgba(0 0 0 / 0.5);
  --size: 6;
  min-height: calc(var(--cover-size) * 2.5);
  width: calc(var(--cover-size) * var(--size));
  margin: 0 auto;
  padding: calc(var(--cover-size) / 3 * 2) 0;
  position: relative;
  max-width: 90vw;
}

.cards li {
  display: inline-block;
  scroll-snap-align: center;
  /* Track this element as it intersects the scrollport */
  view-timeline-name: --li-in-and-out-of-view;
  view-timeline-axis: inline;

  /* Link an animation to the established view-timeline and have it run during the contain phase */
  animation: linear adjust-z-index both;
  animation-timeline: --li-in-and-out-of-view;

  /* Make the 3D stuff workâ€¦ */
  perspective: 40em;

  position: relative;
  z-index: 1;
  will-change: z-index;

  user-select: none;
}

.cards li > img {
  /* Link an animation to the established view-timeline (of the parent li) and have it run during the contain phase */
  animation: linear rotate-cover both;
  animation-timeline: --li-in-and-out-of-view;

  /* Prevent FOUC */
  transform: translateX(-100%) rotateY(-45deg);

  will-change: transform;
}

.cards li img {
  display: block;
  width: var(--cover-size);
  height: var(--cover-size);
  -webkit-box-reflect: below 0.5em
    linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.25));
}

.cards li:first-of-type {
  margin-left: calc(50% - (var(--cover-size) / 2));
}

.cards li:last-of-type {
  margin-right: calc(50% - (var(--cover-size) / 2));
}

@keyframes sticky-parallax-header-move-and-size {
  from {
    background-position: 50% 0;
  }

  to {
    background-position: 50% 100%;
    background-color: #d78bb1;
    height: 10vh;
    font-size: 2em;
  }
}

#sticky-parallax-header {
  position: fixed;
  top: 0;

  animation: sticky-parallax-header-move-and-size linear forwards;
  animation-timeline: scroll();
  animation-range: 0vh 90vh;
  z-index: 999;
}

body {
  padding-top: 100vh;
}

#sticky-parallax-header {
  position: fixed;
  top: 0;
  animation: sticky-parallax-header-move-and-size linear forwards;
  animation-timeline: scroll();
  animation-range: 0vh 90vh;
}

#sticky-parallax-header {
  color: #fff;
  height: 100vh;
  width: 100%;
  background-image: url(/images/bg.jpeg);
  background-size: cover;
  background-position: 50% 50%;
  background-blend-mode: soft-light;
  display: grid;
  place-items: center;
  text-align: center;
  font-size: calc(4vw + 1em);
}

main {
  background-color: inherit;
  margin-block-start: 1em;
  display: grid;
  gap: 2em;
  padding: 1em;
  color: antiquewhite;
  --animation-range: entry 10% cover 30%;
}

.scrolling-gallery {
  display: flex;
  flex-wrap: wrap;
  gap: 1em;
  place-items: center;
  border: 1px solid antiquewhite;
  border-radius: 5px;
  padding: 1em;

  > * {
    flex-grow: 1;
  }
}

.scrolling-columns {
  display: grid;
  gap: 1em;
  place-items: center;
  padding: 1em;
  border: 1px solid antiquewhite;
  border-radius: 5px;

  h2 {
    font-size: 2rem;
    text-align: center;
  }
  --animation-range: entry 1% cover 2%;
}

.columns {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
    Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2em;
  width: 100%;
  max-width: 80em;
  margin: 0 auto;
  position: relative;
  overflow-y: hidden;
}

.column {
  --column-offset: 10vh;
  display: flex;
  flex-direction: column;
  gap: 1em;
  padding: var(--column-offset) 0;
}

.column-reverse {
  flex-direction: column-reverse;
  animation: adjust-position linear forwards;
  animation-timeline: scroll(root block);
}

.column__item-imgwrap img {
  border-radius: 1em;
  width: 100%;
  height: auto;
  aspect-ratio: 0.75;
  object-fit: cover;
}

.column__item-caption {
  font-size: 1.5rem;
  color: #fff;
  text-align: center;
}

/* Set up Animation */
@keyframes adjust-position {
  /* Start position: shift entire column up, but not so that it goes out of view */
  from {
    transform: translateY(calc(-100% + 100vh));
  }

  /* End position: shift entire column down, but not so that it goes out of view */
  to {
    transform: translateY(calc(100% - 100vh));
  }
}

.celebration {
  display: grid;
  place-items: center;
  gap: 1em;
  margin-block-end: 2vh;
}

.birthday {
  padding: 1em;

  img {
    max-inline-size: 90vw;
    max-block-size: 70vh;
    margin: 0 auto;
  }
}

@keyframes reveal {
  from {
    opacity: 0;
    clip-path: inset(45% 20% 45% 20%);
  }
  to {
    opacity: 1;
    clip-path: inset(0% 0% 0% 0%);
  }
}

.revealing {
  view-timeline-name: --revealing-image;
  view-timeline-axis: block;

  animation: linear reveal both;
  animation-timeline: --revealing-image;
  animation-range: var(--animation-range);
}
